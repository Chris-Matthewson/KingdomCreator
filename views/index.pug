extends layout.pug

block head
   != js("index")
   != css("index")

block content
   .sidebar
      .sidebar-content.filters
         .sidebar-content-title Sets
         .sets(data-bind="foreach: sets")
            .set
               label.checkbox
                  input(type="checkbox", data-bind="checked: active")
                  span(data-bind="text: name")
         .clear
         .sidebar-content-title Options
         .option
            label.checkbox
               input(type="checkbox", data-bind="checked: randomizerSettings.requireActionProvider")
               span Require +2 Action
         .option
            label.checkbox
               input(type="checkbox", data-bind="checked: randomizerSettings.requireBuyProvider")
               span Require Buy
         .option
            label.checkbox
               input(type="checkbox", data-bind="checked: randomizerSettings.allowAttacks")
               span Allow Attacks
            .suboption
               label.checkbox(data-bind="css:{'disable': !randomizerSettings.allowAttacks}")
                  input(type="checkbox", data-bind="checked: randomizerSettings.requireReaction, \
                        enable: randomizerSettings.allowAttacks")
                  span Require Reaction
         .option
            label.checkbox
               input(type="checkbox", data-bind="checked: randomizerSettings.requireTrashing")
               span Require Trashing
         .option
            label.checkbox
               input(type="checkbox", data-bind="enable: prioritizeSetAllowed, \
                     checked: prioritizeSetEnabled")
               span Prioritize Set
            .suboption
               select(data-bind="enable: prioritizeSetEnabled, options: prioritizeSetOptions, \
                     optionsValue: 'value', optionsText: 'name', optionsCaption: 'Choose set...', \
                     value: randomizerSettings.prioritizeSet")
         .sidebar-content-title Display
         .option
            label.checkbox
               input(type="checkbox", data-bind="checked: settings.showSetOnCards")
               span Show Set on Cards
         .option
            label.checkbox
               input(type="checkbox", data-bind="checked: settings.sortAlphabetically")
               span Sort Alphabetically
         a.sidebarRandomizeButton.button(
               data-bind="click: randomize, text: randomizeButtonText")
      .sidebar-content.meta(data-bind="visible: metadata.show, with: metadata")
         .sidebar-content-title Recommendations
         .recommendation
            | Use Colonies/Platinums:
            | <span data-bind="text: useColonies() ? 'Yes' : 'No'"></span>
         .recommendation
            | Use Shelters:
            | <span data-bind="text: useShelters() ? 'Yes' : 'No'"></span>
   .hovering-randomize-button(data-bind="showFloating: '.sidebarRandomizeButton'")
      a.button(data-bind="click: randomize, text: randomizeButtonText")
   .main
      #cards(data-bind="style:{visibility: hasLoaded() ? 'visible':'hidden'}, \
            foreach: cards, css: {'enlarge-cards': isCondensed() && isEnlarged()}",
            style="visibility:hidden;")
         .card-wrap(data-bind="click: toggleSelected, css: {'selected': selected}")
            .flipper(data-bind="scaleOffWidthOfImage:{selector: '.card-back-image', \
                  trigger: $parent.isEnlarged() + Date.now() }, \
                  css: { 'show-front': cardImageLoaded() && !isLoading() }" )
               .card-back
                  img.card-back-image(src="/img/cards/backside_blue.jpg")
               .card-front
                  img(data-bind="attr:{src:imageUrl}")
                  .set-name-wrap
                     .set-name(data-bind="text: set, \
                           visible: $root.settings.showSetOnCards() && !isLoading(), css:setClass")
            .highlight

      .eventsAndLandmarks-header(data-bind="visible: showEventsAndLandmarks, \
            text: eventsAndLandmarksHeader")
      .eventsAndLandmarks(data-bind="visible: showEventsAndLandmarks, \
            foreach: eventsAndLandmarks, css: {'enlarge-cards': isCondensed() && isEnlarged()}")
         .card-wrap(data-bind="click: toggleSelected, css: {'selected': selected}")
            .flipper(data-bind="scaleOffWidthOfImage:{selector: '.card-back-image', \
                  trigger: $parent.isEnlarged() + $parent.showEventsAndLandmarks() + Date.now() }, \
                  css: { 'show-front': cardImageLoaded() && !isLoading() }" )
               .card-back
                  img.card-back-image(src="/img/cards/backside_blue_horizontal.jpg")
               .card-front
                  img(data-bind="attr:{src:imageUrl}")
                  .set-name-wrap
                     .set-name(data-bind="text: set, \
                           visible: $root.settings.showSetOnCards() && !isLoading(), css:setClass")
            .highlight
      .clear   

block afterFooter
   a.change-size-button(data-bind="visible: isCondensed")
      .change-size-button-icon(data-bind="click: toggleEnlarged, css:{ 'enlarged': isEnlarged}")

   .dialog-hidden-content
      .dialog-content(data-bind="with: dialog")
         .dialog-desc Use this dialog to customize the replacement card(s)
         .sets-wrap
            h1(data-bind="click: toggleSetsSection")
               span.heading Sets
               span.toggleButton(data-bind="text: openSetsSection() ?'Hide':'Show'")
            .sets(data-bind="foreach: sets, slideVisible: openSetsSection")
               .set.checkbox-wrap.columns
                  label.checkbox
                     input(type="checkbox", data-bind="checked: active")
                     span(data-bind="text: name")
            .clear
            h1(data-bind="click: toggleTypesSection")
               span.heading Types
               span.toggleButton(data-bind="text: openTypesSection() ?'Hide':'Show'")
            .types(data-bind="foreach: types, slideVisible: openTypesSection")
               .type.checkbox-wrap.columns
                  label.checkbox
                     input(type="radio", name="types",
                           data-bind="checked: $parent.selectedType, attr: {value: id}")
                     span(data-bind="text: name")
            .clear
            h1(data-bind="click: toggleCostsSection")
               span.heading Cost
               span.toggleButton(data-bind="text: openCostsSection() ?'Hide':'Show'")
            .costs(data-bind="foreach: costs, slideVisible: openCostsSection")
               .cost.checkbox-wrap.columns.four
                  label.checkbox
                     input(type="checkbox", data-bind="checked: active")
                     span(data-bind="text: name")
            .clear

         .dialog-buttons
            a.button(data-bind="click: fetchNewCards") Randomize
            a.button.gray(data-bind="click: close") Close
            .clear
